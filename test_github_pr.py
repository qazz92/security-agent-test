"""
GitHub PR 자동 생성 테스트
"""
import asyncio
import sys
import os

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.agents.orchestrator_agent import SecurityOrchestrator


async def main():
    """GitHub PR 생성 포함 전체 워크플로우 테스트"""

    print("="*70)
    print("🔐 SecurityAgent - Automatic GitHub PR Creation Demo")
    print("="*70)
    print()
    print("이 데모는 다음을 수행합니다:")
    print("1. 보안 취약점 분석")
    print("2. 수정 방안 생성")
    print("3. GitHub에 자동으로 Pull Request 생성")
    print()
    print("⚠️  사전 요구사항:")
    print("   - GitHub CLI (gh) 설치 필수")
    print("   - gh auth login 으로 인증 완료")
    print("   - Git repository가 https://github.com/qazz92/security-agent-test 와 연결되어 있어야 함")
    print("="*70)
    print()

    # 사용자 확인
    response = input("계속 진행하시겠습니까? (y/n): ")
    if response.lower() != 'y':
        print("취소되었습니다.")
        return

    orchestrator = SecurityOrchestrator(verbose=True)

    # GitHub 저장소 URL 포함하여 분석 요청
    query = """
    Comprehensive security analysis and remediation for GitHub repository:
    https://github.com/qazz92/security-agent-test

    After generating the remediation plan, please create an actual GitHub Pull Request
    with the security fixes.
    """

    result = await orchestrator.analyze_and_remediate(
        'demo/hello-world-vulnerable',
        query
    )

    print("\n" + "="*70)
    print("📄 WORKFLOW RESULTS")
    print("="*70)

    if "error" not in result:
        analysis_summary = result.get("security_analysis", {}).get("analysis_summary", {})
        remediation_summary = result.get("remediation_plan", {}).get("remediation_summary", {})

        print(f"✅ Total Vulnerabilities Found: {analysis_summary.get('total_vulnerabilities', 0)}")
        print(f"✅ PR Template Created: {remediation_summary.get('pr_template_created', False)}")
        print(f"✅ Documentation Created: {remediation_summary.get('documentation_created', False)}")

        # GitHub PR 생성 여부 확인
        detailed_remediation = result.get("remediation_plan", {}).get("detailed_remediation", {})
        pr_template = detailed_remediation.get("pr_template", "")

        print("\n📝 Generated PR Template:")
        print("-" * 70)
        print(pr_template[:500] + "..." if len(pr_template) > 500 else pr_template)
        print("-" * 70)

    else:
        print(f"❌ Error: {result.get('error')}")

    print("="*70)


async def test_pr_creation_directly():
    """GitHub PR 생성 Tool을 직접 테스트"""

    from src.tools.github_tools import create_github_pr

    print("\n🧪 Testing GitHub PR creation directly...")

    pr_body = """## 🔐 Security Patch

### Summary
- Fixed 12 critical security vulnerabilities
- Updated dependencies with known CVEs
- Added input validation and sanitization

### Testing
- [x] All existing tests pass
- [x] Security scan clean

### Checklist
- [x] No hardcoded secrets
- [x] Input validation added
- [x] Database queries use parameterized statements

🤖 Generated by SecurityAgent
"""

    result = create_github_pr._run(
        repo_url="https://github.com/qazz92/security-agent-test",
        pr_title="🔒 Fix Critical Security Vulnerabilities",
        pr_body=pr_body,
        branch_name="security-fixes-auto",
        base_branch="main"
    )

    print("\n📊 PR Creation Result:")
    print(result)


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="GitHub PR 자동 생성 테스트")
    parser.add_argument(
        '--direct',
        action='store_true',
        help="Tool을 직접 테스트 (전체 워크플로우 스킵)"
    )

    args = parser.parse_args()

    if args.direct:
        asyncio.run(test_pr_creation_directly())
    else:
        asyncio.run(main())