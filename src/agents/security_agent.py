"""
Î≥¥Ïïà Î∂ÑÏÑù ÏóêÏù¥Ï†ÑÌä∏
Ï∑®ÏïΩÏ†ê ÌÉêÏßÄ Î∞è Î∂ÑÏÑùÏùÑ Îã¥Îãπ
"""

import asyncio
import time
from typing import Dict, List, Any, Optional
from langchain.agents import create_tool_calling_agent, AgentExecutor
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_core.messages import HumanMessage, AIMessage, SystemMessage

from ..models.llm_config import create_security_llm, SecurityModelSelector, PromptTemplates
from ..tools.scanner_tools import fetch_project_info, scan_with_trivy, analyze_dependencies, check_security_configs
from ..tools.analysis_tools import calculate_priority_score, analyze_vulnerability_trends, generate_security_metrics, generate_compliance_report


class SecurityAnalysisAgent:
    """Î≥¥Ïïà Î∂ÑÏÑù Ï†ÑÎ¨∏ ÏóêÏù¥Ï†ÑÌä∏"""

    def __init__(self, verbose: bool = True):
        # Î≥¥Ïïà Î∂ÑÏÑùÏóêÎäî Í∞ÄÏû• Î≥¥ÏàòÏ†ÅÏù¥Í≥† Ï†ïÌôïÌïú Î™®Îç∏ ÏÇ¨Ïö©
        self.llm = create_security_llm(
            task_type="pattern_detection",
            security_level="CRITICAL"
        )
        self.verbose = verbose

        # Î∂ÑÏÑù ÎèÑÍµ¨Îì§
        self.analysis_tools = [
            fetch_project_info,
            scan_with_trivy,
            analyze_dependencies,
            check_security_configs,
            calculate_priority_score,
            analyze_vulnerability_trends,
            generate_security_metrics,
            generate_compliance_report
        ]

        # ÏóêÏù¥Ï†ÑÌä∏ Ï¥àÍ∏∞Ìôî
        self.agent_executor = self._create_agent()

        # Î∂ÑÏÑù Í≤∞Í≥º Ï†ÄÏû•
        self.analysis_results = {}
        self.performance_metrics = {
            "start_time": None,
            "end_time": None,
            "tools_used": [],
            "vulnerabilities_found": 0
        }

    def _create_agent(self) -> AgentExecutor:
        """Î≥¥Ïïà Î∂ÑÏÑù ÏóêÏù¥Ï†ÑÌä∏ ÏÉùÏÑ± - LangChain 0.3.x Ìò∏Ìôò"""

        # ÌîÑÎ°¨ÌîÑÌä∏ ÌÖúÌîåÎ¶ø ÏÑ§Ï†ï (Tool Calling AgentÏö©)
        system_prompt = """You are a senior security engineer specialized in comprehensive vulnerability analysis.

Your responsibilities:
1. Systematically analyze projects for security vulnerabilities
2. Use multiple scanning tools to ensure comprehensive coverage
3. Prioritize findings based on severity and exploitability
4. Provide detailed technical analysis with actionable insights
5. Generate security metrics and compliance reports

Analysis Workflow:
1. Gather project information and structure
2. Perform Trivy scans for known vulnerabilities
3. Analyze dependencies for CVEs
4. Conduct static code analysis for security patterns
5. Calculate priority scores for each finding
6. Generate trend analysis and metrics
7. Create compliance reports

For each vulnerability found, provide:
- Technical description and impact
- CVSS severity assessment
- Exploitation scenarios
- Business impact analysis
- Recommended priority level

Be thorough, accurate, and focus on actionable security insights."""

        prompt = ChatPromptTemplate.from_messages([
            ("system", system_prompt),
            MessagesPlaceholder(variable_name="chat_history", optional=True),
            ("human", "{input}"),
            MessagesPlaceholder(variable_name="agent_scratchpad")
        ])

        # LangChain 0.3.xÏùò ÏÉàÎ°úÏö¥ Tool Calling Agent ÏÉùÏÑ±
        agent = create_tool_calling_agent(
            llm=self.llm,
            tools=self.analysis_tools,
            prompt=prompt
        )

        return AgentExecutor(
            agent=agent,
            tools=self.analysis_tools,
            verbose=self.verbose,
            handle_parsing_errors=True,
            max_iterations=10,
            return_intermediate_steps=True
        )

    async def analyze_project(self, project_path: str, user_query: str = None) -> Dict[str, Any]:
        """ÌîÑÎ°úÏ†ùÌä∏ Î≥¥Ïïà Î∂ÑÏÑù Ïã§Ìñâ"""

        self.performance_metrics["start_time"] = time.time()

        try:
            # Î∂ÑÏÑù ÏöîÏ≤≠ Íµ¨ÏÑ±
            analysis_prompt = f"""
Perform a comprehensive security analysis of the project at: {project_path}

Analysis Requirements:
1. Fetch project information and understand structure
2. Run Trivy scan for container and dependency vulnerabilities
3. Analyze all dependencies for known CVEs
4. Perform static code analysis for security anti-patterns
5. Calculate priority scores for all findings
6. Generate vulnerability trend analysis
7. Create security metrics and compliance report

User Query: {user_query or 'Comprehensive security analysis'}

Please follow the workflow systematically and provide detailed findings.
Start with project information gathering, then proceed with security scans.
"""

            # ÏóêÏù¥Ï†ÑÌä∏ Ïã§Ìñâ
            if self.verbose:
                print("\nüîç Starting comprehensive security analysis...")
                print("   [1/7] Fetching project information...")

            result = await self._run_agent_async(analysis_prompt)

            if self.verbose:
                print("   [2/7] Running Trivy vulnerability scan...")
                print("   [3/7] Analyzing dependencies for CVEs...")
                print("   [4/7] Checking security configurations...")
                print("   [5/7] Calculating priority scores...")
                print("   [6/7] Analyzing vulnerability trends...")
                print("   [7/7] Generating security metrics...")

            # Í≤∞Í≥º Ï≤òÎ¶¨
            self.performance_metrics["end_time"] = time.time()
            self.performance_metrics["duration"] = (
                self.performance_metrics["end_time"] - self.performance_metrics["start_time"]
            )

            # Î∂ÑÏÑù Í≤∞Í≥º Íµ¨Ï°∞Ìôî
            analysis_results = self._structure_analysis_results(result, project_path)

            self.analysis_results = analysis_results
            return analysis_results

        except Exception as e:
            self.performance_metrics["end_time"] = time.time()
            return {
                "error": f"Security analysis failed: {str(e)}",
                "project_path": project_path,
                "analysis_timestamp": time.time()
            }

    async def _run_agent_async(self, prompt: str) -> Dict[str, Any]:
        """ÎπÑÎèôÍ∏∞Î°ú ÏóêÏù¥Ï†ÑÌä∏ Ïã§Ìñâ"""
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(
            None,
            lambda: self.agent_executor.invoke({"input": prompt})
        )

    def _structure_analysis_results(self, raw_result: Dict[str, Any], project_path: str) -> Dict[str, Any]:
        """Î∂ÑÏÑù Í≤∞Í≥ºÎ•º Íµ¨Ï°∞ÌôîÎêú ÌòïÌÉúÎ°ú Î≥ÄÌôò"""

        # Ï§ëÍ∞Ñ Îã®Í≥ÑÏóêÏÑú ÎèÑÍµ¨ Ìò∏Ï∂ú Í≤∞Í≥º Ï∂îÏ∂ú
        intermediate_steps = raw_result.get("intermediate_steps", [])
        tool_results = {}

        for step in intermediate_steps:
            if len(step) >= 2:
                action, observation = step[0], step[1]
                tool_name = getattr(action, 'tool', 'unknown')

                # JSON ÌååÏã± ÏãúÎèÑ
                try:
                    if isinstance(observation, str):
                        import json
                        observation = json.loads(observation)
                except:
                    pass

                tool_results[tool_name] = observation
                self.performance_metrics["tools_used"].append(tool_name)

        # Ï∑®ÏïΩÏ†ê ÏàòÏßë Î∞è Ï†ïÎ¶¨
        vulnerabilities = []
        total_risk_score = 0

        # Trivy Í≤∞Í≥º Ï≤òÎ¶¨
        if 'scan_with_trivy' in tool_results:
            trivy_data = tool_results['scan_with_trivy']
            if 'filesystem_scan' in trivy_data and 'Results' in trivy_data['filesystem_scan']:
                for result in trivy_data['filesystem_scan']['Results']:
                    if 'Vulnerabilities' in result:
                        vulnerabilities.extend(result['Vulnerabilities'])

        # Ï†ïÏ†Å Î∂ÑÏÑù Í≤∞Í≥º Ï≤òÎ¶¨
        if 'check_security_configs' in tool_results:
            security_issues = tool_results['check_security_configs'].get('security_issues', [])
            vulnerabilities.extend(security_issues)

        self.performance_metrics["vulnerabilities_found"] = len(vulnerabilities)

        # Ïã¨Í∞ÅÎèÑÎ≥Ñ Î∂ÑÎ•ò
        severity_counts = {"CRITICAL": 0, "HIGH": 0, "MEDIUM": 0, "LOW": 0}
        for vuln in vulnerabilities:
            severity = vuln.get('Severity', vuln.get('severity', 'UNKNOWN')).upper()
            if severity in severity_counts:
                severity_counts[severity] += 1

        return {
            "project_path": project_path,
            "analysis_summary": {
                "total_vulnerabilities": len(vulnerabilities),
                "severity_distribution": severity_counts,
                "analysis_duration": self.performance_metrics.get("duration", 0),
                "tools_used": list(set(self.performance_metrics["tools_used"])),
                "analysis_timestamp": time.time()
            },
            "detailed_results": {
                "project_info": tool_results.get('fetch_project_info', {}),
                "trivy_scan": tool_results.get('scan_with_trivy', {}),
                "dependency_analysis": tool_results.get('analyze_dependencies', {}),
                "security_config_scan": tool_results.get('check_security_configs', {}),
                "vulnerability_trends": tool_results.get('analyze_vulnerability_trends', {}),
                "security_metrics": tool_results.get('generate_security_metrics', {}),
                "compliance_report": tool_results.get('generate_compliance_report', {})
            },
            "vulnerabilities": vulnerabilities,
            "agent_output": raw_result.get("output", ""),
            "performance_metrics": self.performance_metrics,
            "recommendations": self._generate_recommendations(vulnerabilities, severity_counts)
        }

    def _generate_recommendations(self, vulnerabilities: List[Dict], severity_counts: Dict[str, int]) -> List[str]:
        """Î∂ÑÏÑù Í≤∞Í≥º Í∏∞Î∞ò Í∂åÏû•ÏÇ¨Ìï≠ ÏÉùÏÑ±"""
        recommendations = []

        if severity_counts["CRITICAL"] > 0:
            recommendations.append(f"üö® Ï¶âÏãú Ï°∞Ïπò ÌïÑÏöî: {severity_counts['CRITICAL']}Í∞úÏùò Critical Ï∑®ÏïΩÏ†ê Î∞úÍ≤¨")

        if severity_counts["HIGH"] > 0:
            recommendations.append(f"‚ö†Ô∏è Ïö∞ÏÑ† ÏàòÏ†ï: {severity_counts['HIGH']}Í∞úÏùò High Ï∑®ÏïΩÏ†ê Î∞úÍ≤¨")

        # Ï∑®ÏïΩÏ†ê Ìå®ÌÑ¥ Î∂ÑÏÑù
        vuln_types = {}
        for vuln in vulnerabilities:
            vuln_type = vuln.get('type', vuln.get('VulnerabilityID', 'Unknown'))
            vuln_types[vuln_type] = vuln_types.get(vuln_type, 0) + 1

        # Í∞ÄÏû• ÎßéÏùÄ Ï∑®ÏïΩÏ†ê ÌÉÄÏûÖ
        if vuln_types:
            most_common = max(vuln_types.items(), key=lambda x: x[1])
            if most_common[1] > 1:
                recommendations.append(f"üîç {most_common[0]} ÌÉÄÏûÖ Ï∑®ÏïΩÏ†êÏù¥ {most_common[1]}Í∞ú Î∞úÍ≤¨Îê® - Ìå®ÌÑ¥ Í≤ÄÌÜ† ÌïÑÏöî")

        # Ï¢ÖÏÜçÏÑ± Í¥ÄÎ†® Í∂åÏû•ÏÇ¨Ìï≠
        if any('CVE' in str(vuln) for vuln in vulnerabilities):
            recommendations.append("üì¶ Ï¢ÖÏÜçÏÑ± ÏóÖÎç∞Ïù¥Ìä∏Î•º ÌÜµÌïú CVE ÏàòÏ†ï Í∂åÏû•")

        # ÏùºÎ∞òÏ†ÅÏù∏ Î≥¥Ïïà Í∂åÏû•ÏÇ¨Ìï≠
        if len(vulnerabilities) > 10:
            recommendations.append("üõ°Ô∏è Ï†ïÍ∏∞Ï†ÅÏù∏ Î≥¥Ïïà Ïä§Ï∫î ÌîÑÎ°úÏÑ∏Ïä§ Íµ¨Ï∂ï Í∂åÏû•")

        recommendations.append("üìã Î™®Îì† ÏàòÏ†ïÏÇ¨Ìï≠Ïóê ÎåÄÌïú ÌÖåÏä§Ìä∏ ÏºÄÏù¥Ïä§ ÏûëÏÑ± ÌïÑÏöî")

        return recommendations

    def get_analysis_summary(self) -> str:
        """Î∂ÑÏÑù Í≤∞Í≥º ÏöîÏïΩ ÌÖçÏä§Ìä∏ ÏÉùÏÑ±"""
        if not self.analysis_results:
            return "No analysis results available."

        summary = self.analysis_results.get("analysis_summary", {})

        return f"""
üîí Î≥¥Ïïà Î∂ÑÏÑù ÏôÑÎ£å

üìä ÏöîÏïΩ:
- Ï¥ù Ï∑®ÏïΩÏ†ê: {summary.get('total_vulnerabilities', 0)}Í∞ú
- Critical: {summary.get('severity_distribution', {}).get('CRITICAL', 0)}Í∞ú
- High: {summary.get('severity_distribution', {}).get('HIGH', 0)}Í∞ú
- Medium: {summary.get('severity_distribution', {}).get('MEDIUM', 0)}Í∞ú
- Low: {summary.get('severity_distribution', {}).get('LOW', 0)}Í∞ú

‚è±Ô∏è Î∂ÑÏÑù ÏãúÍ∞Ñ: {summary.get('analysis_duration', 0):.1f}Ï¥à
üîß ÏÇ¨Ïö©Îêú ÎèÑÍµ¨: {len(summary.get('tools_used', []))}Í∞ú

{'üö® Ï¶âÏãú Ï°∞Ïπò ÌïÑÏöî!' if summary.get('severity_distribution', {}).get('CRITICAL', 0) > 0 else '‚úÖ Critical Ï∑®ÏïΩÏ†ê ÏóÜÏùå'}
"""